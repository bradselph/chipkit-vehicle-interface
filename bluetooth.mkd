---
layout: default
title: Bluetooth Support - OpenXC
---

<div class="page-header">
    <h1>Bluetooth Support</h1>
</div>

The vehicle interface (VI) firmware supports for sending data over a serial
(UART) connection instead of USB. If you add a Bluetooth adapter that uses the
Serial Port Profile (SPP) to your VI, you can connect a tablet (or even a
phone!) to your car wirelessly. The Android library also has support for
communicating with a Bluetooth vehicle interface.

The VI firmware must be compiled with the `UART=1` flag for this
feature to work. Manufacturers may choose to distribute pre-compiled binaries
with this option enabled, too.

See the [VI
documentation](http://openxcplatform.com/cantranslator/output/uart.html) for
more details on adding Bluetooth.


<div class="page-header">
    <h2>Bluetooth Assembly</h2>
</div>

For this chipKIT-based vehicle interface, we recommend the [SparkFun
BlueSMiRF](https://www.sparkfun.com/products/10269) Bluetooth module. These
instructions will guide you through the process of installing the module and
configuring it to communicate with the VI.

**Bluetooth Parts List**

* SparkFun [BlueSMiRF Silver Bluetooth Module](https://www.sparkfun.com/products/10269)
* 6 pin length of male to male header pins (right-angle works well)
* 6 additional female  and male crimp housings and pins *or* a
  [pre-crimped assortment](http://www.pololu.com/catalog/product/1807).

<div class="picture well">
    <img src="/images/assembly/bluetooth-wiring.jpg" />
    <legend>Wiring the BlueSMiRF to the chipKIT (thanks to Jim Kearns for the
        picture) </legend>
</div>

**Assembly Instructions**

1. Solder the 6-pin header strip to the BlueSMiRF breakout board.
1. Create 6 3" wires of different colors with a male crimp pin on one end and a
   female crimp housing on the other. You may want to wrap the crimp housings in
   shrink tubing to avoid shorts.
1. Attach the 6 wires to the BlueSMiRF board, and the other ends to the Network
   Shield according to the pins defined in the
   [documentation](http://openxcplatform.com/cantranslator/output/uart.html#chipkit-max32).
1. Find a good place to tuck the Bluetooth module away so the wires aren't
   shorting out and it won't get in the way of the enclosure.

Finally, you need to set the baud rate of the BlueSMiRF module to match the
output data rate of the VI. Check in the [UART section][uart] of the VI firmware
documentation for the correct baud rate for the latest release.

*Requirements*

* Computer or Android device with Bluetooth support
* If using a computer, a Bluetooth or serial port terminal client
* If using an Android device, a Bluetooth terminal app like
  [BlueTerm](https://play.google.com/store/apps/details?id=es.pymasde.blueterm&feature=search_result#?t=W251bGwsMSwyLDEsImVzLnB5bWFzZGUuYmx1ZXRlcm0iXQ..)

*Assembly*

1. Power up the BlueSMiRF module by giving the chipKIT power - confirm there is
   a red light flashing on the BlueSMiRF.
1. Pair with the device (look for the FireFly or RN-42 device that has 4
   matching characters from the BlueSMiRF's MAC address) from the computer or
   Android device
1. Open a serial terminal to the connected device
1. Send these [AT
   commands](http://www.sparkfun.com/datasheets/Wireless/Bluetooth/rn-bluetooth-um.pdf)
   to set the baud rate to 460800 (replace 460800 with whatever value you found
   in the [VI firmware documentation][uart])
   1. Type `$$$` to enter command mode - it should echo back `CMD`
   1. Type `SU,46` and press Enter to switch the baud rate to 460800 (the first
      2 digits of the baud rate) - it should echo back `AOK`
   1. Type `D` and press Enter to print out the BlueSMiRF's settings - verify
      that the baud rate is set to what you expect it to be.
1. Power cycle the BlueSMiRF - you're all set!

<div class="page-header">
    <h2 id="troubleshooting"><a href="#troubleshooting">Troubleshooting</a></h2>
</div>

If you've assembled the Bluetooth module and flashed with a firmware, but you
aren't receiving any data on your Android device, try these troubleshooting
steps.

* Confirm that the BlueSMiRF status light is green when your Android device
  connects to the device. In the OpenXC Enabler, you should see a
  `BluetoothVehicleDataSource` listed under `Sources`, and its socket should not
  be null.
* Double check the pins on the chipKIT side - they're very close together so
  look from above and make sure they are in the correct numbered holes.
* Double check the pins on the BlueSMiRF side - make the Rx and Tx aren't
  flipped, and the same for CTS/RTS.
* Confirm the baud rate of the RN-42 is correct - double check in the [PIC32
  UART platform
  docs](http://openxcplatform.com/cantranslator/platforms/max32.html#uart) to
  find the correct rate.
* Finally, take a picture of your setup and post a link in the [Google
  Group](https://groups.google.com/forum/?fromgroups#!forum/openxc)
  - sometimes another pair of eyes can catch those really tricky problems.

[uart]: http://openxcplatform.com/cantranslator/platforms/max32.html#uart
